import struct
import cli
import logging
import base64

LOG = logging.getLogger(__name__)

class Report():
    """An abstract base class for Quote

    This class a abstract class with a common static method `get_quote` for external
    SDK interface, the subclasses need to implement `parse` method to parse Quote
    information.

    Attributes:
        _quote (bytes): The bytes of a quote.
        _type (str): The type of a quote.
    """

    TYPE_TDX = 'TDX'
    TYPE_TPM = 'TPM'

    def __init__(self, report: str = None, report_type: str = None):
        """Initialize report object.

        The constructor to initialize quote object with quote bytes and quote type.

        Args:
            report (bytes): The bytes of a quote.
            report_type (str): The type of a quote.
        """
        self._report = report
        self._type = report_type

    @property
    def report_type(self) -> int:
        """str: The type of the report."""
        return self._type

    @property
    def report(self) -> bytes:
        """bytes: the bytes of the report"""
        return self._report

    @staticmethod
    def get_report(report_type: str = None, nonce: str = None, user_data: str = None):
        """Get report interface

        The get report interface to expose to SDK.

        Args:
            nonce (str): Base64 encoded nonce to prevent replay attack.
            user_data (str): Base64 encoded user data to be measured in a quote.

        Returns:
            Report: The report object for specific report type.
            None: Filed to get a report.
        """
        client = cli.CCNPClient()
        resp = client.GetReport(user_data=user_data, nonce=nonce) 
        if resp is not None  \
            and resp.report is not None and len(resp.report) > 0:
            LOG.info("Get quote successfully.")
            report_data = base64.b64decode(resp.report)
            if report_type == "TDX":
                report = ReportTDX(report_data, report_type)
                report.parse()
                return report
        LOG.error("Failed to get report.")
        return None

class ReportTDX(Report):
    """TDX quote class

    This class is a subclass of Quote to parse TDX sepecific quote.
    Refer: https://cdrdv2.intel.com/v1/dl/getContent/733568

    Attributes:
        _version (int): TD quote version
        _tdreport (bytes): The bytes of TD report.
        _tee_type (int): Type of TEE for which the Quote has been generated.
        _tee_tcb_svn (bytes): Array of TEE TCB SVNs.
        _mrseam (bytes): Measurement of the SEAM module (SHA384 hash). 
        _mrsignerseam (bytes): Measurement of a 3rd party SEAM module’s signer (SHA384 hash).
        _seamattributes (bytes): SEAM’s ATTRIBUTES.
        _tdattributes (bytes): TD’s ATTRIBUTES.
        _xfam (bytes): TD’s XFAM.
        _mrtd (bytes): Measurement of the initial contents of the TD (SHA384 hash).
        _mrconfigid (bytes): Software defined ID for non-owner-defined configuration of the TD
        _mrowner (bytes): Software defined ID for the guest TD’s owner.
        _mrownerconfig (bytes): Software defined ID for owner-defined configuration of the TD
        _rtmr (bytes): Array of 4 runtime extendable measurement registers (SHA384 hash).
        _reportdata (bytes): Additional Report Data.
        _signature (bytes): ECDSA signature, r component followed by s component, 2 x 32 bytes.
        _attestation_key (bytes): Public part of ECDSA Attestation Key generated by Quoting Enclave.
        _cert_data (bytes): Data required to certify Attestation Key used to sign the Quote.
    """
    def __init__(self, report: bytes, report_type: str):
        """Initialize TD report object

        The constructor of TD report object, initialize attributes.

        Args:
            report (bytes): The bytes of a report.
            report_type (str): The type of a report.
        """
        super().__init__(report, report_type)
        self._version = 0
        self._tdreport = None
        self._tee_type = 0
        self._tee_tcb_svn = None
        self._mrseam = None
        self._mrsignerseam = None
        self._seamattributes = None
        self._tdattributes = None
        self._xfam = None
        self._mrtd = None
        self._mrconfigid = None
        self._mrowner = None
        self._mrownerconfig = None
        self._rtmrs = []
        self._reportdata = None
        self._signature = None
        self._attestation_key = None
        self._cert_data = None

    @property
    def version(self) -> int:
        """int: the version of the quote"""
        return self._version

    @property
    def tdreport(self) -> bytes:
        """bytes: the bytes of the TD report"""
        return self._tdreport

    @property
    def tee_type(self) -> int:
        """int: the TEE type of the quote"""
        return self._tee_type

    @property
    def mrseam(self) -> bytes:
        """bytes: the MRSEAM in the quote"""
        return self._mrseam

    @property
    def mrsignerseam(self) -> bytes:
        """bytes: the bytes of MRSIGNERSEAM in the quote"""
        return self._mrsignerseam

    @property
    def seam_attributes(self) -> bytes:
        """bytes: the bytes of SEAM ATTRIBUTES in the quote"""
        return self._seamattributes

    @property
    def td_attributes(self) -> bytes:
        """bytes: the bytes of TD ATTRIBUTES in the quote"""
        return self._tdattributes

    @property
    def xfam(self) -> bytes:
        """bytes: the bytes of XFAM in the quote"""
        return self._xfam

    @property
    def mrtd(self) -> bytes:
        """bytes: the bytes of MRTD in the quote"""
        return self._mrtd

    @property
    def mrconfigid(self) -> bytes:
        """bytes: the bytes of MRCONFIGID in the quote"""
        return self._mrconfigid

    @property
    def mrowner(self) -> bytes:
        """bytes: the bytes of MROWNER in the quote"""
        return self._mrowner

    @property
    def mrownerconfig(self) -> bytes:
        """bytes: the bytes of MROWNERCONFIG in the quote"""
        return self._mrownerconfig

    @property
    def rtmrs(self) -> bytes:
        """bytes: the bytes of RTMRs in the quote"""
        rtmrs=[]
        for i in range(4):
            rtmrs.append(self._rtmrs[i*48:(i+1)*48])
        return rtmrs

    @property
    def report_data(self) -> bytes:
        """bytes: the bytes of REPORTDATA in the quote"""
        return self._reportdata

    @property
    def signature(self) -> bytes:
        """bytes: the bytes of signature of the quote"""
        return self._signature

    @property
    def attestation_key(self) -> bytes:
        """bytes: the bytes of attestation key in the quote"""
        return self._attestation_key

    @property
    def cert_data(self) -> bytes:
        """bytes: the bytes of certification data in the quote"""
        return self._cert_data

    def parse(self):
        """Parse TD quote

        This method is to parse the TD quote and TD report data.
        Refer: https://cdrdv2.intel.com/v1/dl/getContent/733568

        Raises:
            struct.error: Unpack quote data failed.
        """
        report_len = len(self._report)
        # Header, Body, Auth Data
        header, self._tdreport, auth_size, auth_data = \
            struct.unpack(f"<48s584sI{report_len-48-584-4}s", self._report)
        auth_data = auth_data[:auth_size]
        # Header
        self._version, _, self._tee_type, _ = struct.unpack(f"<2HI{len(header)-8}s", header)
        # Body
        self._tee_tcb_svn, self._mrseam, self._mrsignerseam, self._seamattributes, \
        self._tdattributes, self._xfam, self._mrtd, self._mrconfigid, self._mrowner, \
        self._mrownerconfig, self._rtmrs, self._reportdata = \
            struct.unpack("16s48s48s8s8s8s48s48s48s48s192s64s", self._tdreport)
        # Auth Data
        self._signature, self._attestation_key, cert_data = \
            struct.unpack(f"64s64s{auth_size-128}s", auth_data)
        # Certification Data
        _, _, self._cert_data = struct.unpack(f"<HI{len(cert_data)-6}s", cert_data)

class ReportTPM(Report):
    """TODO: implement TPM Quote class"""
    def __init__(self, report: bytes, report_type: str):
        """Initialize TPM quote object

        The constructor of TD quote object, initialize attributes.

        Args:
            quote (bytes): The bytes of a quote.
            quote_type (str): The type of a quote.
        """
        super().__init__(report, report_type)
        # TODO